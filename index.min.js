"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(function () {
  var kinds = ['', 'vf', 'voa', 'eta', 'vr'];
  var fullKinds = ['', 'visa free', 'visa on arrival', 'eTA', 'visa required'];
  var types = ['', 'eVisa', 'eVisitors', 'free visa on arrival', 'tourist card', 'tourist registration', 'trump ban', 'pre-enrollment', 'visa on arrival / eVisa', 'EVW', 'free eVisa', 'visa waiver registration', 'pre-visa on arrival', 'not admitted', 'eVisa by email', 'visa on arrival (by email)', 'eVisa (fast track)'];
  var terms = ['', '7 days', '14 days', '90 days', '28 days', '30 days', '180 days', '360 days', '31 days', '-', undefined, undefined, '60 days', '15 days', '120 days', '240 days', '45 days', '21 days', '42 days'];
  var colors = {
    vf: '#0c0',
    voa: '#00f',
    eta: '#f80',
    vr: '#f00'
  };
  var width = window.innerWidth;
  var height = window.innerHeight;
  var projection = d3.geoMercator().translate([width / 2, height / 1.7]).scale((width - 1) / 2 / Math.PI);
  var path = d3.geoPath().projection(projection);
  var tooltip = d3.select('.tooltip');
  var zoom = d3.zoom().scaleExtent([1, 12]).on('zoom', zoomed);
  var svg = d3.select('body').append('svg').attr('width', width).attr('height', height).call(zoom);
  svg.append('g');
  Promise.all([d3.json('https://gist.githubusercontent.com/igaponov/be196eb8ff3a56847fb75dfc23550c75/raw/1e6f6b2dca4f612ffed941a02faee37a8837b0e2/countries.json'), d3.json('https://gist.githubusercontent.com/igaponov/be196eb8ff3a56847fb75dfc23550c75/raw/1e6f6b2dca4f612ffed941a02faee37a8837b0e2/world-50m.json'), d3.json('https://gist.githubusercontent.com/igaponov/be196eb8ff3a56847fb75dfc23550c75/raw/1e6f6b2dca4f612ffed941a02faee37a8837b0e2/data.json')]).then(onFulfilled, onRejected);

  function onFulfilled(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        countries = _ref2[0],
        world = _ref2[1],
        data = _ref2[2];

    countries = countries.filter(function (country) {
      return data.hasOwnProperty(country.alpha2.toUpperCase());
    });
    populateSelect(countries);
    var topoData = topojson.feature(world, world.objects.countries).features;
    var countryData = countries.reduce(function (result, country) {
      result[country.id] = {
        name: country.name,
        code: country.alpha2.toUpperCase()
      };
      return result;
    }, {});
    svg.select('g').selectAll("path").data(topoData.filter(function (d) {
      var country = countryData[d.id];

      if (country && data[country.code]) {
        d.name = country.name;
        d.code = country.code;
        return true;
      }
    })).enter().append("path").attr("stroke", "white").attr("stroke-width", 1).attr("fill", 'gray').attr("d", path).on("mouseover", function () {
      d3.select(this).attr("fill-opacity", 0.4);
    }).on("mousemove", function (d) {
      tooltip.classed("hidden", false).style("top", d3.event.pageY + "px").style("left", d3.event.pageX + 10 + "px").html(d.name + (d.hasOwnProperty('visa') ? ': ' + d.visa : ''));
    }).on("mouseout", function () {
      d3.select(this).attr("fill-opacity", 1);
      tooltip.classed("hidden", true);
    });
    document.addEventListener('autocomplete', function (event) {
      svg.select('g').selectAll('path').each(function (d) {
        if (d.code === event.detail) {
          d3.select(this).attr('fill', 'gray');
        } else {
          var parsed = parse(d.code, event.detail, data);
          d3.select(this).attr('fill', colors[parsed[0]]);
          d.visa = [parsed[1], parsed[2]].filter(function (a) {
            return !!a;
          }).join(' / ');
        }
      });
    });
  }

  function onRejected(err) {
    document.write(err.message);
  }

  function zoomed() {
    svg.select('g').selectAll('path').attr("stroke-width", 1 / d3.event.transform.k).attr('transform', d3.event.transform);
  }

  function parse(code, currentCode, data) {
    var kind, type, term;
    var index = data[currentCode].indexOf(code);

    if (index === -1) {
      kind = 4;
      type = 0;
      term = 0;
    } else {
      var _data$currentCode$sub = data[currentCode].substr(index + 2, 3).split('').map(function (n) {
        return parseInt(n, 32);
      });

      var _data$currentCode$sub2 = _slicedToArray(_data$currentCode$sub, 3);

      kind = _data$currentCode$sub2[0];
      type = _data$currentCode$sub2[1];
      term = _data$currentCode$sub2[2];
    }

    return [kinds[kind], type ? types[type] : fullKinds[kind], terms[term]];
  }

  function populateSelect(countries) {
    new autoComplete({
      selector: '#country',
      minChars: 1,
      offsetTop: 5,
      source: function source(term, suggest) {
        term = term.toLowerCase();
        suggest(countries.filter(function (country) {
          return country.name.toLowerCase().indexOf(term) !== -1;
        }));
      },
      renderItem: function renderItem(item, search) {
        search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        return '<div class="autocomplete-suggestion" data-val="' + item.name + '" data-code="' + item.alpha2.toUpperCase() + '">' + item.name.replace("/".concat(search, "/gi"), "<b>$1</b>") + '</div>';
      },
      onSelect: function onSelect(e, term, item) {
        document.dispatchEvent(new CustomEvent('autocomplete', {
          detail: item.getAttribute('data-code')
        }));
      }
    });
  }
})();
